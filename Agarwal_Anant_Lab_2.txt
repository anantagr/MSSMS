Question 1.

Create a view named OrderItemProducts that returns columns from the Orders, OrderItems, and Products tables.
	This view should return these columns from the Orders table: OrderID, OrderDate, TaxAmount, and ShipDate.
	This view should return these columns from the OrderItems table: ItemPrice, DiscountAmount, 
		FinalPrice (the discount amount subtracted from the item price), Quantity, 
		and ItemTotal (the calculated total for the item).
	This view should return the ProductName column from the Products table.

Answer 1.

create view OrderItemProducts
as
select OrderItems.OrderID, OrderDate, TaxAmount, ShipDate,
	ItemPrice, DiscountAmount,  
	(ItemPrice - DiscountAmount) as FinalPrice, Quantity, 
	((ItemPrice * Quantity) - DiscountAmount) as ItemTotal,
	ProductName
from ((OrderItems 
	join Orders on OrderItems.OrderID = Orders.OrderID)
	join Products on OrderItems.ProductID	= Products.ProductID)



Question 2.
Create a view named ProductSummary that uses the view you created in point 1. This view should return some summary information 
about each product.
Each row should include these columns: ProductName, OrderCount (the number of times the product has been ordered), 
					and OrderTotal (the total sales for the product).

Answer 2.

create view ProductSummary
as
select ProductName, 
	count(ProductName) as OrderCount,
	sum(ItemTotal) as OrderTotal
from OrderItemProducts
group by ProductName


Question 2.2

Write a SELECT statement that uses the view that you created in point 2 to get total sales for the five best selling products. 
Take a screenshot that shows results returned from this query.

Answer 2.2

select format(sum(OrderTotal), 'c') as TotalSales
from (
    select top 5 OrderTotal
    from ProductSummary
	Order by OrderTotal desc
) as TotalSales

***Screenshot attached

$35,636.70




Question 3.
Suppose an application will often search Products based on ProductName. Create an index that makes such search more efficient. 
Take a screenshoot that shows your command succeeded.

Answer 3.

create index INDX_PRODUCT_NAME
on Products(ProductName)

***Screenshot attached




Question 4.
Alter table ORDERS to ensure that both ShipAddressID and BillingAddressID reference table Addresses. 
Take a screenshoot that shows your command(s) succeeded.

Answer 4.

alter table orders
add constraint FK_Ship_Add foreign key(ShipAddressID) references Addresses(AddressID)

alter table orders
add constraint FK_Bill_Add foreign key(BillingAddressID) references Addresses(AddressID)


***Screenshot attached